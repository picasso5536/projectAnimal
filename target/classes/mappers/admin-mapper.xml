<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="admin">
	<!-- 관리자 mapper -->

	<!-- 약관 리스트 -->
	<select id="termsList" resultType="tvo">
		SELECT * FROM TERMS
	</select>

	<!-- 약관 수정 -->
	<update id="termsUpdate" parameterType="Map">
		UPDATE TERMS SET
		TERMS_INFO = #{terms_info} WHERE TERMS_NAME = #{terms_name}
	</update>

	<!-- 약관 삭제 -->
	<delete id="termsDelete" parameterType="String">
		DELETE FROM TERMS WHERE
		TERMS_NAME = #{termsName}
	</delete>

	<!-- 약관 등록 -->
	<insert id="termsInsert" parameterType="Map">
		INSERT INTO
		TERMS(TERMS_IDX, TERMS_NAME, TERMS_INFO) VALUES(TERMS_IDX_SEQ.NEXTVAL,
		#{terms_name}, #{terms_info})
	</insert>

	<!-- 배너 개수 -->
	<select id="bannerCount" resultType="int">
		SELECT COUNT(*) FROM BANNER
	</select>

	<!-- 해당 배너 상세정보 -->
	<select id="bannerOneList" resultType="bvo" parameterType="int">
		SELECT * FROM BANNER WHERE BNR_IDX = #{bnr_idx}
	</select>

	<!-- 배너 리스트 -->
	<select id="bannerList" resultType="bvo" parameterType="Map">
		SELECT *
		FROM(
		SELECT ROWNUM R_NUM, A.*
		FROM (SELECT * FROM BANNER ORDER BY
		BNR_IDX DESC) A
		) WHERE R_NUM BETWEEN #{begin} and #{end}
	</select>

	<!-- 배너 등록 -->
	<insert id="bannerInsert" parameterType="bvo">
		INSERT INTO
		BANNER(BNR_IDX, BNR_IMG, BNR_DIV, BNR_ORDER, BNR_VISIBLE, BNR_DATE,
		BNR_UPDATE, BNR_STATE, ADM_IDX) VALUES(BANNER_IDX_SEQ.NEXTVAL,
		#{bnr_img}, #{bnr_div}, #{bnr_order}, #{bnr_visible}, sysdate, null,
		#{bnr_state}, 1)
	</insert>

	<!-- 배너 삭제 -->
	<delete id="bannerDelete" parameterType="int">
		DELETE FROM BANNER WHERE
		BNR_IDX = #{bnr_idx}
	</delete>

	<!-- 배너 수정 -->
	<update id="bannerUpdate" parameterType="bvo">
		UPDATE BANNER SET
		BNR_DIV = #{bnr_div}, BNR_ORDER = #{bnr_order}, BNR_VISIBLE =
		#{bnr_visible}, BNR_STATE = #{bnr_state}, BNR_UPDATE = SYSDATE,
		BNR_IMG = #{bnr_img} WHERE BNR_IDX = #{bnr_idx}
	</update>

	<!-- 공지 개수 -->
	<select id="noticeCount" resultType="int">
		SELECT COUNT(*) FROM
		NOTIFICATION
	</select>

	<!-- 공지 리스트 -->
	<select id="noticeList" resultType="nvo" parameterType="Map">
		SELECT *
		FROM(
		SELECT ROWNUM R_NUM, A.*
		FROM (SELECT * FROM NOTIFICATION ORDER BY
		NOTICE_IDX DESC) A
		) WHERE R_NUM BETWEEN #{begin} and #{end}
	</select>

	<!-- 해당 공지 상세정보 -->
	<select id="noticeOneList" resultType="nvo" parameterType="int">
		SELECT * FROM NOTIFICATION WHERE NOTICE_IDX = #{notice_idx}
	</select>

	<!-- 공지 등록 -->
	<insert id="noticeInsert" parameterType="nvo">
		INSERT INTO
		NOTIFICATION(NOTICE_IDX, NOTICE_TITLE, NOTICE_INFO, NOTICE_HIT,
		NOTICE_VISIBLE, NOTICE_IMG, NOTICE_DATE, NOTICE_STATE, NOTICE_PRIORTY,
		NOTICE_DIV, ADM_IDX) VALUES(NOTICE_IDX_SEQ.NEXTVAL, #{notice_title},
		#{notice_info}, 0, #{notice_visible}, #{notice_img}, sysdate,
		#{notice_state}, #{notice_priorty}, #{notice_div}, 1)
	</insert>

	<!-- 공지 수정 -->
	<update id="noticeUpdate" parameterType="nvo">
		UPDATE NOTIFICATION SET
		NOTICE_DIV = #{notice_div}, NOTICE_PRIORTY = #{notice_priorty},
		NOTICE_VISIBLE =
		#{notice_visible}, NOTICE_STATE = #{notice_state},
		NOTICE_IMG = #{notice_img}, NOTICE_TITLE = #{notice_title},
		NOTICE_INFO = #{notice_info}
		WHERE NOTICE_IDX = #{notice_idx}
	</update>

	<!-- 공지 삭제 -->
	<delete id="noticeDelete" parameterType="int">
		DELETE FROM NOTIFICATION
		WHERE
		NOTICE_IDX = #{notice_idx}
	</delete>

	<!-- 전체 회원 수 -->
	<select id="mbrCount" resultType="int">
		SELECT COUNT(*) FROM MEMBERS
	</select>

	<!-- 회원 리스트 : 회원명으로 검색 -->
	<select id="getMbrByName" parameterType="Map" resultType="mvo">
		SELECT
		*
		FROM(
		SELECT ROWNUM R_NUM, A.*
		FROM (SELECT * FROM MEMBERS WHERE
		MBR_NAME LIKE '%'||#{txt}||'%' ORDER BY
		MBR_NICKNAME DESC) A
		) WHERE
		R_NUM BETWEEN #{begin} and #{end}
	</select>

	<!-- 회원 리스트 : 회원 아이디로 검색 -->
	<select id="getMbrById" parameterType="Map" resultType="mvo">
		SELECT *
		FROM(
		SELECT ROWNUM R_NUM, A.*
		FROM (SELECT * FROM MEMBERS WHERE MBR_ID
		LIKE '%'||#{txt}||'%' ORDER BY
		MBR_ID DESC) A
		) WHERE R_NUM BETWEEN
		#{begin} and #{end}
	</select>

	<!-- 회원 리스트 : 탈퇴여부로 검색 -->
	<select id="getMbrByWithdraw" parameterType="Map"
		resultType="mvo">
		SELECT *
		FROM(
		SELECT ROWNUM R_NUM, A.*
		FROM (SELECT * FROM
		MEMBERS WHERE MBR_WITHDRAW = 0 AND (MBR_ID LIKE '%'||#{txt}||'%' OR
		MBR_NAME LIKE '%'||#{txt}||'%')ORDER BY
		MBR_ID DESC) A
		) WHERE R_NUM
		BETWEEN
		#{begin} and #{end}
	</select>

	<!-- 회원 상세 정보 -->
	<select id="memberOneList" parameterType="String"
		resultType="mvo">
		SELECT a.*, b.PNT_NOW FROM MEMBERS a, POINT b WHERE
		a.MBR_NICKNAME = #{mbr_nickname} AND a.MBR_NICKNAME = b.MBR_NICKNAME
	</select>

	<!-- 회원 정보 수정 -->
	<update id="memberUpdate" parameterType="mvo">
		UPDATE MEMBERS SET
		MBR_NAME = #{mbr_name}, MBR_CELLPHONE = #{mbr_cellphone},
		MBR_TELEPHONE = #{mbr_telephone}, MBR_ADDRESS = #{mbr_address}
		WHERE
		MBR_NICKNAME = #{mbr_nickname}
	</update>

	<!-- 관리자 리스트 : 관리자 명으로 검색 -->
	<select id="getAdmByName" parameterType="Map" resultType="avo">
		SELECT
		*
		FROM(
		SELECT ROWNUM R_NUM, A.*
		FROM (SELECT * FROM ADMIN WHERE
		ADM_NAME
		LIKE '%'||#{txt}||'%' ORDER BY
		ADM_NAME DESC) A
		) WHERE
		R_NUM BETWEEN
		#{begin} and #{end}
	</select>

	<!-- 관리자 리스트 : 관리자 아이디로 검색 -->
	<select id="getAdmById" parameterType="Map" resultType="avo">
		SELECT
		*
		FROM(
		SELECT ROWNUM R_NUM, A.*
		FROM (SELECT * FROM ADMIN WHERE
		ADM_ID
		LIKE '%'||#{txt}||'%' ORDER BY
		ADM_ID DESC) A
		) WHERE
		R_NUM BETWEEN
		#{begin} and #{end}
	</select>

	<!-- 관리자 리스트 : 관리자 번호로 검색 -->
	<select id="getAdmByIdx" parameterType="Map" resultType="avo">
		SELECT
		*
		FROM(
		SELECT ROWNUM R_NUM, A.*
		FROM (SELECT * FROM ADMIN WHERE
		ADM_IDX
		LIKE '%'||#{txt}||'%' ORDER BY
		ADM_IDX DESC) A
		) WHERE
		R_NUM BETWEEN
		#{begin} and #{end}
	</select>

	<!-- 관리자 상세 정보 -->
	<select id="adminOneList" resultType="avo"
		parameterType="String">
		SELECT * FROM ADMIN WHERE ADM_IDX = #{adm_idx}
	</select>

	<!-- 관리자 계정 생성 : 아이디 중복확인 -->
	<select id="getIdDupCheck" resultType="int"
		parameterType="String">
		SELECT COUNT(*) FROM ADMIN WHERE ADM_ID = #{adm_id}
	</select>

	<!-- 관리자 계정 생성 -->
	<insert id="admInsert" parameterType="avo">
		INSERT INTO ADMIN(ADM_IDX,
		ADM_NAME, ADM_ID, ADM_PW, ADM_EMAIL, ADM_JOIN, ADM_ACCESS, ADM_CLOSE,
		ADM_MGR, ADM_STATE) VALUES(ADM_IDX_SEQ.NEXTVAL, #{adm_name},
		#{adm_id}, #{adm_pw}, #{adm_email}, sysdate, null, null, #{adm_mgr}, 1)
	</insert>
	
	<!-- 관리자 mkt mapper -->
	
	<!-- 관리자 상품 조건검색 -->
	<select id="select_pdt_searchlist" resultType="pdtvo" parameterType="Map">
		SELECT p.*, c.corp_name, k3.kate_name as kate_name3, k2.kate_name as kate_name2, k1.kate_name as kate_name1
		FROM PRODUCT p
		JOIN CORPORATION c ON p.corp_idx = c.corp_idx
		<!-- 계층형 구조를 모두 select하기 위해 KATEGORIE테이블을 각각 다른 이름으로 3번 조인 -->
		LEFT JOIN KATEGORIE k1 ON p.kate_idx = k1.kate_idx
		LEFT JOIN KATEGORIE k2 ON k1.kate_kind = k2.kate_idx
		LEFT JOIN KATEGORIE k3 ON k2.kate_kind = k3.kate_idx
		WHERE 1=1
		<if test="kate_idx != null and kate_idx != ''">
		<!-- pdt의kate_idx 가 파라미터값인 kate_idx이거나 카테고리 테이블의 kate_kind가 kate_idx인 경우도 포함 같은 파라미터 값으로 3번 검색 -->
			AND (p.kate_idx = #{kate_idx} OR k1.kate_idx = #{kate_idx} OR k2.kate_idx = #{kate_idx} OR k3.kate_idx = #{kate_idx})
		</if>
		<choose>
			<!-- search_type이 pdt_name 이고 keyword가 notnull일 때 PRODUCT테이블의 pdt_name중 keyword 를 포함하는 결과를 검색 -->
			<when test="search_type == 'pdt_name' and keyword != null and keyword != ''">
				AND p.pdt_name LIKE '%' || #{keyword} || '%'
			</when>
			<!-- search_type이 corp_name 이고 keyword가 notnull일 때 CORPORATION테이블의 corp_name중 keyword 를 포함하는 결과를 검색-->
			<when test="search_type == 'corp_name' and keyword != null and keyword != ''">
				AND c.corp_name LIKE '%' || #{keyword} || '%'
			</when>
		</choose>
		<if test="pdt_inven != null and pdt_inven != ''">
			<choose>
			   <when test="pdt_inven == 1000 ">
			   	   AND p.pdt_inven <![CDATA[>=]]> 1000
			   </when>
			   <when test="pdt_inven == 999 ">
			   	   AND p.pdt_inven <![CDATA[<]]> 1000
			   </when>
			   <otherwise>
			   	   AND p.pdt_inven <![CDATA[=]]> 0
			   </otherwise>
			</choose>
		</if>
		<if test="pdt_state != null and pdt_state != ''">
       	 AND p.pdt_state = #{pdt_state}
    	</if>
	</select>
	
	<select id="topkategorylist" resultType="katevo">
		SELECT * FROM KATEGORIE START WITH KATE_KIND IS NULL CONNECT BY KATE_KIND = KATE_IDX
	</select>
	
	<select id="kategorylist" resultType="katevo" parameterType="int">
		SELECT * FROM KATEGORIE START WITH KATE_KIND = #{kate_idx} CONNECT BY KATE_KIND = KATE_IDX
	</select>
	<select id="corplist" resultType="corpvo">
		SELECT * FROM CORPORATION 
	</select>
	<select id="pcllist" resultType="pclvo">
		SELECT * FROM PARCEL
	</select>
	
	<!-- pdt_state = 0->진열/ 1->진열안함 -->
	<insert id="pdtinsert" parameterType="pdtvo">
		INSERT INTO PRODUCT (PDT_IDX, PDT_PRICE, PDT_INFO, PDT_IMG, PDT_NAME, PDT_LCNT, PDT_ODCNT, PDT_SALEPRICE, PDT_STAR, KATE_IDX, PCL_IDX, CORP_IDX, PDT_STATE, PDT_INVEN)
		 values (pdt_idx_seq.NEXTVAL, #{pdt_price}, #{pdt_info}, #{pdt_img}, #{pdt_name}, 0, 0, #{pdt_saleprice}, 0, #{kate_idx}, #{pcl_idx}, #{corp_idx}, #{pdt_state}, #{pdt_inven})
	</insert>
	<!-- 상품수정시 사용할 카테고리 정보 -->
	<select id="kateinfo" resultType="katevo" parameterType="String">
		SELECT * FROM KATEGORIE WHERE KATE_IDX = #{kate_idx}
	</select>
	
	<select id="productInfo" resultType="pdtvo"  parameterType="String">
		SELECT * FROM PRODUCT WHERE PDT_IDX = #{pdt_idx}
	</select>
	
</mapper>